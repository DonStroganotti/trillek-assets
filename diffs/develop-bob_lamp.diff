diff --git a/src/main.cpp b/src/main.cpp
index b6a6085..5ddb42c 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -9,6 +9,12 @@
 #include "systems/graphics.hpp"
 #include <cstddef>
 
+#include "components/renderable.hpp"
+#include "resources/shader.hpp"
+#include "resources/material.hpp"
+#include "resources/md5mesh.hpp"
+#include "resources/transform.hpp"
+
 size_t gAllocatedSize = 0;
 
 int main(int argCount, char **argValues) {
@@ -27,8 +33,18 @@ int main(int argCount, char **argValues) {
     trillek::json::System jparser;
     jparser.Parse("assets/tests/sample.json");
 
+    std::shared_ptr<trillek::graphics::Renderable> ren1(new trillek::graphics::Renderable());
+    auto mesh = trillek::resource::ResourceMap::GetInstance()->Get<trillek::resource::MD5Mesh>("bob");
+    ren1->SetMesh(mesh);
+    ren1->GetMaterial()->SetShader(trillek::resource::ResourceMap::GetInstance()->Get<trillek::resource::Shader>("basic_shader"));
+    ren1->UpdateBufferGroups();
+
     // start the graphic system
     trillek::TrillekGame::GetGraphicSystem().Start(os.GetWindowWidth(), os.GetWindowHeight());
+    trillek::transform::TransformMap::AddTransform(0);
+    trillek::TrillekGame::GetGraphicSystem().AddRenderable(0, ren1);
+
+    auto transform = trillek::transform::TransformMap::GetTransform(0);
 
     // we register the systems in this queue
     std::queue<trillek::SystemBase*> systems;
@@ -50,6 +66,7 @@ int main(int argCount, char **argValues) {
                    std::ref(systems));
     while (!os.Closing()) {
         os.OSMessageLoop();
+        transform->Rotate(glm::vec3(0.0f, 0.0f, glm::radians(1.0f)));
     }
     tp.join();
 
