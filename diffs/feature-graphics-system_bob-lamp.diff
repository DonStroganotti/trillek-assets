diff --git a/include/resources/Mesh.hpp b/include/resources/Mesh.hpp
index ba7de35..ce3c10a 100644
--- a/include/resources/Mesh.hpp
+++ b/include/resources/Mesh.hpp
@@ -10,7 +10,7 @@ namespace resource {
 
 // Vertex data used for rendering or other purposes.
 struct VertexData {
-    VertexData() : position(0.0f, 0.0f, 0.0f) { }
+    VertexData() : position(0.0f, 0.0f, 0.0f), color(0.0f, 1.0f, 0.0f, 1.0f) { }
     glm::vec3 position;
     glm::vec4 color;
     glm::vec3 normal;
diff --git a/src/main.cpp b/src/main.cpp
index 11ade82..89e2bdb 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -2,19 +2,36 @@
 #include "systems/json-parser.hpp"
 #include "systems/transform-system.hpp"
 #include "systems/ResourceSystem.h"
+#include "systems/Graphics.hpp"
+#include "components/Renderable.hpp"
+#include "resources/Shader.hpp"
+#include "resources/Material.hpp"
+#include "resources/MD5Mesh.hpp"
 
 int main(int argCount, char **argValues) {
     trillek::OS os;
     os.InitializeWindow(800, 600, "Trillek Client Core", 3, 0);
 
     trillek::system::TransformSystem::GetInstance();
-    trillek::system::ResourceSystem::GetInstance();
 
     trillek::system::JSONParser jparser;
     jparser.Parse("assets/tests/sample.json");
 
+    std::shared_ptr<trillek::graphics::Renderable> ren1(new trillek::graphics::Renderable());
+    auto mesh = trillek::system::ResourceSystem::GetInstance()->Get<trillek::resource::MD5Mesh>("bob");
+    ren1->SetMesh(mesh);
+    ren1->GetMaterial()->SetShader(trillek::system::ResourceSystem::GetInstance()->Get<trillek::resource::Shader>("basic_shader"));
+    ren1->UpdateBufferGroups();
+
+    trillek::graphics::GL gl;
+    gl.Start(os.GetWindowWidth(), os.GetWindowHeight());
+    gl.AddRenderable(0, ren1);
+
     while (!os.Closing()) {
         os.OSMessageLoop();
+        gl.Update(0);
+        os.SwapBuffers();
+
     }
 
     os.Terminate();
